#!/usr/bin/env tclsh

#       tv-viewer_diag.tcl
#       Â© Copyright 2007-2009 Christian Rapp <saedelaere@arcor.de>
#       
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 2 of the License, or
#       (at your option) any later version.
#       
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#       
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#       MA 02110-1301, USA.

if {[catch {package require Tcl 8.5}]} { 
	catch {puts "Program error. You'll need Tcl version 8.5 or higher.

Found version: [info patchlevel]
Have a closer look to the user guide for the system requirements.
If you've installed more than one version of Tcl, the symlink tclsh
might not point to the correct location.
/usr/bin/tclsh is pointing to:
[file readlink /usr/bin/tclsh]
"
	}
exit 1
}

after 200

if {[file type [info script]] == "link" } {
	set dwhere_is [file dirname [file normalize [file readlink [info script]]]]
	set dwhere_is [file join {*}[lrange [file split $dwhere_is] 0 end-1]]
} else {
	set dwhere_is [file dirname [file normalize [info script]]]
	set dwhere_is [file join {*}[lrange [file split $dwhere_is] 0 end-1]]
}

set dwhere_is_home "$::env(HOME)"

set droot_test "/usr/bin/tv-viewer.tst"
set droot_test_open [catch {open $droot_test w}]
catch {close $droot_test_open}
if {[file exists "/usr/bin/tv-viewer.tst"]} {
	file delete -force "/usr/bin/tv-viewer.tst"
	if { "$::tcl_platform(user)" == "root" } {
		puts "
You are running tv-viewer as root.
This is not recommended!"
		exit 1
	}
}

set option(release_version) {0.8.1b2 28}

# Start options for the program
array set start_options {--version 0 --help 0 --debug 0}
foreach argumente $argv {set start_options($argumente) 1}
if {[array size start_options] != 3} {
	puts "
TV-Viewer Diagnostic Routine [lindex $option(release_version) 0] Build [lindex $option(release_version) 1]
	
Unkown option(s): $argv

Possible options are:

  --version   Shows the version of the program and the compatibility.
  --help      Displays this help.
"
	exit 0
}

if {$start_options(--help)} {
	puts "
TV-Viewer Diagnostic Routine [lindex $option(release_version) 0] Build [lindex $option(release_version) 1]

Usage: tv-viewer_diag.tcl \[OPTION\]

Possible options are:

  --version   Shows the version of the program and the compatibility.
  --help      Displays this help.
"
	exit 0
}

if {$start_options(--version)} {
	puts "
TV-Viewer Diagnostic Routine [lindex $option(release_version) 0] Build [lindex $option(release_version) 1]

This version is compatible with TV-Viewer [lindex $option(release_version) 0] Build [lindex $option(release_version) 1]
"
	exit 0
}

proc agrep {switch return_input input modifier} {
	foreach line [split "$input" \n] {
		if {"$switch" == "-m"} {
			if {[string match -nocase *$modifier "$line"] || [string match -nocase *$modifier* "$line"] || [string match -nocase $modifier* "$line"]} {
				lappend return_value "$line"
			}
		}
		if {"$switch" == "-w"} {
			if {[lsearch "$line" "$modifier"] != -1} {
				lappend return_value "$line"
			}
		}
	}
	if {[info exists return_value]} {
		if {[llength $return_value] > 1} {
			set return_value [join $return_value \n]
			return -code 0 "$return_value"
		} else {
			set return_value [join $return_value]
			return -code 0 "$return_value"
		}
	} else {
		if {$return_input} {
			return -code 1 "agrep could not find $modifier in $input"
		} else {
			return -code 1 "agrep could not find $modifier"
		}
	}
}

proc diag_writeOut {outfile msg} {
	puts $outfile "$msg"
	flush $outfile
	if {$::start_options(--debug)} {
		puts "$msg"
	}
}

puts "
TV-Viewer Diagnostic Routine [lindex $option(release_version) 0] Build [lindex $option(release_version) 1]

Now collecting relevant data. Results can be found in:
$::dwhere_is_home/tv-viewer_diag.out"

set actual_date [clock format [clock scan now] -format "%d.%m.%Y %H:%M:%S"]

set diag_file [open "$::dwhere_is_home/tv-viewer_diag.out" w]

#Opening output file
diag_writeOut $diag_file "TV-Viewer Diagnostic routine Version [lindex $option(release_version) 0] Build [lindex $option(release_version) 1] -- Created: $actual_date

This file is generated by 'tv-viewer_diag.tcl'.
The data that was collected helps the developers to find bugs and to 
provide specific help for users.
If you don't want to send some parts of this file just delete them.

File a bug report on 
http://sourceforge.net/tracker2/?group_id=238442&atid=1106486
and attach this file, or contact the author.
"

close $diag_file
set diag_file_append [open "$::dwhere_is_home/tv-viewer_diag.out" a]

after 500

# Checking package Tk available and version
set status_tk [catch {package require Tk} resultat_tk]
diag_writeOut $diag_file_append "
***********************************************************************
Tk:
$resultat_tk"

# Checking version of package Tcl.
diag_writeOut $diag_file_append "
***********************************************************************
Tcl:
[info patchlevel]"

# Checking package tkimg available and version.
set status_img [catch {package require Img} resultat_img]
diag_writeOut $diag_file_append "
***********************************************************************
tkimg:
$resultat_img"

# Checking package Ttk available and version.
set status_ttk [catch {package require Ttk} resultat_ttk]
diag_writeOut $diag_file_append "
***********************************************************************
Ttk:
$resultat_ttk"

# Checking package http available and version.
set status_http [catch {package require http} resultat_http]
diag_writeOut $diag_file_append "
***********************************************************************
http:
$resultat_http"

# Checking package msgcat available and version.
set status_msgc [catch {package require msgcat} resultat_msgc]
diag_writeOut $diag_file_append "
***********************************************************************
msgcat:
$resultat_msgc"

after 200

# Checking tv-viewer config directory.
set dircheck [catch {exec sh -c "ls $::env(HOME)/.tv-viewer/*"} resultat_dircheck]
diag_writeOut $diag_file_append "
***********************************************************************
Dircheck(/home/.tv-viewer):
$resultat_dircheck"
#~ set dircheck2 [catch {exec sh -c "ls -R $dwhere_is/*"} resultat_dircheck2]
#~ diag_writeOut $diag_file_append "
#~ ***********************************************************************
#~ Dircheck(/usr/share/tv-viewer):
#~ $resultat_dircheck2"

after 500

# Checking symbolic link tv-viewer. Pointing correct?
set linkcheck [catch {file readlink /usr/bin/tv-viewer} resultat_linkcheck]
diag_writeOut $diag_file_append "
***********************************************************************
Linkcheck:
$resultat_linkcheck"
set linkcheck [catch {file readlink /usr/bin/tv-viewer_diag} resultat_linkcheck]
diag_writeOut $diag_file_append "
***********************************************************************
Linkcheck(diag):
$resultat_linkcheck"
set linkcheck [catch {file readlink /usr/bin/tv-viewer_lirc} resultat_linkcheck]
diag_writeOut $diag_file_append "
***********************************************************************
Linkcheck(lirc):
$resultat_linkcheck"
set linkcheck [catch {file readlink /usr/bin/tv-viewer_scheduler} resultat_linkcheck]
diag_writeOut $diag_file_append "
***********************************************************************
Linkcheck(scheduler):
$resultat_linkcheck"

after 200

# Checking version of tv-viewer.
set status_get_installed_version [catch {glob "$dwhere_is_home/.tv-viewer/config/tv-viewer-*.ver"} resultat_get_installed_version]
if {[string trim $resultat_get_installed_version] != {}} {
	set normalized_version_file [file normalize "$resultat_get_installed_version"]
	set status_regexp_version [regexp {tv-viewer-([\d.ab]+)\.ver} "$normalized_version_file" <-> read_version]
	catch {diag_writeOut $diag_file_append "
***********************************************************************
Checkversion:
$read_version"
	}
}

# On which machine are we running.
set kernelcheck [catch {exec uname -r} resultat_kernelcheck]
diag_writeOut $diag_file_append "
***********************************************************************
Kernelcheck:
$resultat_kernelcheck"

# On which machine are we running.
set archcheck [catch {exec uname -m} resultat_archcheck]
diag_writeOut $diag_file_append "
***********************************************************************
Processor architecture:
$resultat_archcheck"

# Trying to read distribution and version.
set districheck [catch {exec sh -c "cat /etc/*release"} resultat_districheck]
diag_writeOut $diag_file_append "
***********************************************************************
Districheck:
$resultat_districheck"

# Here we beginn with checking some Hardware values.
# Output of lsmod. Are the ivtv moduls loaded?
catch {exec sh -c "lsmod"} read_lsmod
set modcheck [catch {agrep -m 0 "$read_lsmod" ivtv} resultat_modcheck]
diag_writeOut $diag_file_append "
***********************************************************************
Modcheck:
$resultat_modcheck"
set modcheck2 [catch {agrep -m 0 "$read_lsmod" pvrusb2} resultat_modcheck2]
diag_writeOut $diag_file_append "
***********************************************************************
Modcheck(pvrusb2):
$resultat_modcheck2"
set modcheck3 [catch {agrep -m 0 "$read_lsmod" cx18} resultat_modcheck3]
diag_writeOut $diag_file_append "
***********************************************************************
Modcheck(cx18):
$resultat_modcheck3"

# Output of dmesg. TV-Card initialized correct by the driver?
catch {exec sh -c "dmesg"} read_dmesg
set dmesgcheck [catch {agrep -m 0 "$read_dmesg" ivtv} resultat_dmesgcheck]
diag_writeOut $diag_file_append "
***********************************************************************
Dmesgcheck(ivtv):
$resultat_dmesgcheck"
set dmesgcheck2 [catch {agrep -m 0 "$read_dmesg" pvrusb2} resultat_dmesgcheck2]
diag_writeOut $diag_file_append "
***********************************************************************
Dmesgcheck(pvrusb2):
$resultat_dmesgcheck2"
set dmesgcheck3 [catch {agrep -m 0 "$read_dmesg" cx18} resultat_dmesgcheck3]
diag_writeOut $diag_file_append "
***********************************************************************
Dmesgcheck(cx18):
$resultat_dmesgcheck3"

after 200

# Output of lspci. Which tv-card is recognized?
set lspci [auto_execok lspci]
if {[string trim $lspci] != {}} {
	catch {exec sh -c "$lspci -v"} resultat_lspcicheck
	diag_writeOut $diag_file_append "
***********************************************************************
Lspcicheck:
$resultat_lspcicheck"
} else {
	diag_writeOut $diag_file_append "
***********************************************************************
Lspcicheck:
Could not detect lspci."
}

# Output of lsusb. In case you have a supported usb device.
set lsusbcheck [catch {exec sh -c "lsusb"} resultat_lsusbcheck]
diag_writeOut $diag_file_append "
***********************************************************************
Lsusbcheck:
$resultat_lsusbcheck"

# Reading configuration file of tv-viewer.

if {[file exists "$dwhere_is_home/.tv-viewer/config/tv-viewer.conf"]} {
	set open_config_file [open "$dwhere_is_home/.tv-viewer/config/tv-viewer.conf" r]
	while {[gets $open_config_file line]!=-1} {
		if {[string match #* $line] || [string trim $line] == {} } continue
		if {[catch {array set option $line}]} {
			puts stderr "Config file line incorrect: $line"
		}
	}
	close $open_config_file
	diag_writeOut $diag_file_append "
***********************************************************************
Configuration:"
	foreach {key elem} [array get option] {
		catch {diag_writeOut $diag_file_append "$key $elem"}
	}
} else {
	diag_writeOut $diag_file_append "
***********************************************************************
Configuration:
No config file"
}

after 500

# List all video devices.
set videodevicels [catch {exec sh -c "ls /dev/video*"} resultat_videodevicels]
diag_writeOut $diag_file_append "
***********************************************************************
VideoDeviceLS:
$resultat_videodevicels"

# Does the device node from the configuration file exist?
# Trying to read tv-card values using v4l2-ctl.
if {[info exists option(video_device)] == 1 } {
	if {[file exists $option(video_device)]} {
		diag_writeOut $diag_file_append "
***********************************************************************
VideoDeviceConfig:
Video device exists."
		set v4l2checkall [catch {exec v4l2-ctl -d $option(video_device) --all} resultat_v4l2checkall]
		diag_writeOut $diag_file_append "
***********************************************************************
V4l2checkall:
$resultat_v4l2checkall"
		set v4l2checkl [catch {exec v4l2-ctl -d $option(video_device) -l} resultat_v4l2checkl]
		diag_writeOut $diag_file_append "
***********************************************************************
V4l2checkl:
$resultat_v4l2checkl"
	} else {
		diag_writeOut $diag_file_append "
***********************************************************************
Device:
Video device does not exist."
	}
} else {
	set v4l2checkall [catch {exec v4l2-ctl --all} resultat_v4l2checkall]
	diag_writeOut $diag_file_append "
***********************************************************************
V4l2checkallNOCONFIG:
$resultat_v4l2checkall"
	set v4l2checkl [catch {exec v4l2-ctl -l} resultat_v4l2checkl]
	diag_writeOut $diag_file_append "
***********************************************************************
V4l2checklNOCONFIG:
$resultat_v4l2checkl"
}

after 500

# Are the ivtv utilities installed?
diag_writeOut $diag_file_append "
***********************************************************************
Tunecheck:
[auto_execok ivtv-tune]
v4l2check:
[auto_execok v4l2-ctl]"

# Is MPlayer installed
diag_writeOut $diag_file_append "
***********************************************************************
MPlayer:
[auto_execok mplayer]"

if {[string trim [auto_execok mplayer]] != {}} {
	catch {exec mplayer --version} mplayer_ver
	diag_writeOut $diag_file_append "Mplayer_ver:
$mplayer_ver"
	catch {exec mplayer -vo help} mplayer_vo
	diag_writeOut $diag_file_append "Mplayer_vo:
$mplayer_vo"
}

after 200

diag_writeOut $diag_file_append "
***********************************************************************
xdg-utils:
[auto_execok xdg-open]"

# Reading the stations list.
if {[info exists option(frequency_table)] == 1 } {
	if {[file exists "$::env(HOME)/.tv-viewer/config/channels_$option(frequency_table).conf"]} {
		set stationscheck [catch {exec cat "$::env(HOME)/.tv-viewer/config/channels_$option(frequency_table).conf"} resultat_stationscheck]
		diag_writeOut $diag_file_append "
***********************************************************************
StationlistFreqTableConfig:
$resultat_stationscheck"
	}
}

# If there is more than one stations list they will be read in now.
set stationlists [catch {exec sh -c "ls $::env(HOME)/.tv-viewer/config/channels*.conf"} resultat_stationlists]
if { $stationlists == 0 } {
	set i 1
	foreach {slists} [split "$resultat_stationlists" \n] {
		set slist($i) $slists
		set slistsread($i) [catch {exec cat $slist($i)} resultat_slistsread($i)]
		if {[info exists option(frequency_table)] == 1 } {
			if { "$resultat_slistsread($i)" != "$resultat_stationscheck" } {
				diag_writeOut $diag_file_append "
***********************************************************************
Stationlist($i):
$resultat_slistsread($i)"
			}
		}
		incr i
	}
}

after 200

# Reading lastchannel file.
if {[file exists "$::env(HOME)/.tv-viewer/config/lastchannel.conf"]} {
	set lastcheck [catch {exec cat "$::env(HOME)/.tv-viewer/config/lastchannel.conf"} resultat_lastcheck]
	diag_writeOut $diag_file_append "
***********************************************************************
lastchannel:
$resultat_lastcheck"
}

# Reading record config.
if {[file exists "$::env(HOME)/.tv-viewer/config/scheduled_recordings.conf"]} {
	catch {exec cat "$::env(HOME)/.tv-viewer/config/scheduled_recordings.conf"} resultat_scheduled_recordings
	diag_writeOut $diag_file_append "
***********************************************************************
Record_conf:
$resultat_scheduled_recordings"
}

# Looking for a actual recording
if {[file exists "$::env(HOME)/.tv-viewer/config/current_rec.conf"]} {
	catch {exec cat "$::env(HOME)/.tv-viewer/config/current_rec.conf"} resultat_current_rec
	diag_writeOut $diag_file_append "
***********************************************************************
Actual recording:
$resultat_current_rec"
}

# Reading .lircrc
if {[file exists "$::env(HOME)/.lircrc"]} {
	catch {exec cat "$::env(HOME)/.lircrc"} resultat_lircrc
	diag_writeOut $diag_file_append "
***********************************************************************
.lircrc:
$resultat_lircrc"
}

after 200

# Program collected all necessary data.
diag_writeOut $diag_file_append "


Diagnostic routine for TV-Viewer is finished.

Ouput has been stored in:
$::dwhere_is_home/tv-viewer_diag.out

File a bug report on 
http://sourceforge.net/tracker2/?group_id=238442&atid=1106486
and attach the created file.
"

after 200
if {[file isdirectory "$::env(HOME)/.tv-viewer/tmp/"]} {
	if {[file exists "$::env(HOME)/.tv-viewer/tmp/comSocket.tmp"]} {
		set comsocket [open "$::env(HOME)/.tv-viewer/tmp/comSocket.tmp" a]
		fconfigure $comsocket -blocking no -buffering line
		puts $comsocket "tv-viewer_main main_frontendDiagnosticFinished"
		flush $comsocket
		exit 0
	} else {
		diag_writeOut $diag_file_append "
Fatal error. Could not open com socket"
		close $diag_file_append
		exit 1
	}
} else {
	close $diag_file_append
	exit 0
}
