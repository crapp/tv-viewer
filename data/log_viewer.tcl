#       log_viewer.tcl
#       Â© Copyright 2007-2010 Christian Rapp <christianrapp@users.sourceforge.net>
#       
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 2 of the License, or
#       (at your option) any later version.
#       
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#       
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#       MA 02110-1301, USA.

proc log_viewerCheck {} {
	puts $::main(debug_msg) "\033\[0;1;33mDebug: log_viewerCheck \033\[0m"
	if {$::option(log_files) == 1} {
		if {[file exists "$::option(home)/log/tvviewer.log"]} {
			if {[file size "$::option(home)/log/tvviewer.log"] > [expr $::option(log_size_tvviewer) * 1000]} {
				catch {file delete "$::option(home)/log/tvviewer.log"}
				set logf_tv_open [open "$::option(home)/log/tvviewer.log" w]
				puts $logf_tv_open "
########################################################################
# TV-Viewer logfile. Release version [lindex $::option(release_version) 0] Build [lindex $::option(release_version) 1]
# Start new session [clock format [clock scan now] -format {%d.%m.%Y %H:%M:%S}]
#"
				close $logf_tv_open
				set ::logf_tv_open_append [open "$::option(home)/log/tvviewer.log" a]
			} else {
				set ::logf_tv_open_append [open "$::option(home)/log/tvviewer.log" a]
				puts $::logf_tv_open_append "
########################################################################
# TV-Viewer logfile. Release version [lindex $::option(release_version) 0] Build [lindex $::option(release_version) 1]
# Start new session [clock format [clock scan now] -format {%d.%m.%Y %H:%M:%S}]
#"
				flush $::logf_tv_open_append
			}
		} else {
			set logf_tv_open [open "$::option(home)/log/tvviewer.log" w]
			puts $logf_tv_open "
########################################################################
# TV-Viewer logfile. Release version [lindex $::option(release_version) 0] Build [lindex $::option(release_version) 1]
# Start new session [clock format [clock scan now] -format {%d.%m.%Y %H:%M:%S}]
#"
			close $logf_tv_open
			set ::logf_tv_open_append [open "$::option(home)/log/tvviewer.log" a]
		}
		if {[file exists "$::option(home)/log/videoplayer.log"]} {
			if {[file size "$::option(home)/log/videoplayer.log"] > [expr $::option(log_size_mplay) * 1000]} {
				catch {file delete "$::option(home)/log/videoplayer.log"}
				set logf_mpl_open [open "$::option(home)/log/videoplayer.log" w]
				puts $logf_mpl_open "
########################################################################
# MPlayer logfile. Release version [lindex $::option(release_version) 0] Build [lindex $::option(release_version) 1]
# Start new session [clock format [clock scan now] -format {%d.%m.%Y %H:%M:%S}]
#"
				close $logf_mpl_open
				set ::logf_mpl_open_append [open "$::option(home)/log/videoplayer.log" a]
			} else {
				set ::logf_mpl_open_append [open "$::option(home)/log/videoplayer.log" a]
				puts $::logf_mpl_open_append "
########################################################################
# MPlayer logfile. Release version [lindex $::option(release_version) 0] Build [lindex $::option(release_version) 1]
# Start new session [clock format [clock scan now] -format {%d.%m.%Y %H:%M:%S}]"
				flush $::logf_tv_open_append
			}
		} else {
			set logf_mpl_open [open "$::option(home)/log/videoplayer.log" w]
			puts $logf_mpl_open "
########################################################################
# MPlayer logfile. Release version [lindex $::option(release_version) 0] Build [lindex $::option(release_version) 1]
# Start new session [clock format [clock scan now] -format {%d.%m.%Y %H:%M:%S}]
#"
			close $logf_mpl_open
			set ::logf_mpl_open_append [open "$::option(home)/log/videoplayer.log" a]
		}
		log_writeOutTv 0 "Logging is enabled in the configuration."
		log_writeOutTv 0 "Starting to log events generated by TV-Viewer and MPlayer."
	} else {
		set ::logf_mpl_open_append [open /dev/null a]
		set ::logf_tv_open_append [open /dev/null a]
	}
	fconfigure $::logf_tv_open_append -blocking no -buffering line
	fconfigure $::logf_mpl_open_append -blocking no -buffering line
}

proc log_viewerSaveLog {handler parent} {
	set types {
	{{Logfiles}      {.log}       }
	}
	array set sofile {
		type(tv) tvviewer
		type(mpl) videoplayer
		type(sched) scheduler
	}
	
	vid_wmCursor 0
	set ofile [ttk::getSaveFile -filetypes $types -defaultextension ".log" -initialdir "$::env(HOME)" -initialfile "[subst $sofile(type\($handler\))]" -hidden 0 -title [mc "Choose output file"] -parent $parent]
	if {[string trim $ofile] == {}} {
		vid_wmCursor 1
		return
	}
	if {[file isdirectory [file dirname "$ofile"]] == 0} {
		log_writeOutTv 2 "Can not save logfile"
		log_writeOutTv 2 "$ofile"
		log_writeOutTv 2 "Not a directory"
		vid_wmCursor 1
		return
	}
	vid_wmCursor 1
	file copy -force "$::option(home)/log/$sofile(type\($handler\)).log" "$ofile"
}

proc log_viewerUi {handler} {
	puts $::main(debug_msg) "\033\[0;1;33mDebug: log_viewerUi \033\[0m \{$handler\}"
	# 1 = TV-Viewer 2 =  MPlayer 3 = Scheduler
	
	array set ident {
		1 tv
		2 mpl
		3 sched
	}
	array set ident {
		filen(1) tvviewer
		filen(2) videoplayer
		filen(3) scheduler
		op(1) tv
		op(2) mpl
		op(3) sched
		name(1) TV-Viewer
		name(2) MPlayer
		name(3) Scheduler
		tailc(1) log_viewerTvTail
		tailc(2) log_viewerMplTail
		tailc(3) log_viewerSchedTail
	}
	
	if {[winfo exists .log_viewer_$ident(op\($handler\))] == 0} {
		log_writeOutTv 0 "Launching log viewer for $ident(name\($handler\))."
		
		set w [toplevel .log_viewer_$ident(op\($handler\))]
		place [ttk::frame $w.bgcolor] -x 0 -y 0 -relwidth 1 -relheight 1
		set mf [ttk::frame $w.f_log_$ident(op\($handler\))]
		set wfbottom [ttk::frame $w.f_log_$ident(op\($handler\))_buttons -style TLabelframe]
		set ftop [ttk::frame $w.f_log_$ident(op\($handler\))_top]
		
		ttk::separator $w.sep_main -orient horizontal
		ttk::button $ftop.b_save -style Toolbutton -image $::icon_m(floppy) -command [list log_viewerSaveLog $ident(op\($handler\)) $w]
		ttk::button $ftop.b_email -style Toolbutton -image $::icon_m(e-mail) -command [list log_viewerEmail $handler]
		
		ttk::separator $ftop.sep_sep1 -orient vertical
		
		ttk::checkbutton $ftop.cb_verb_debug -text Debug -variable log(verbose_$ident(op\($handler\))_debug) -command [list log_viewerReadFile $handler $mf.t_log_$ident(op\($handler\)) $mf.lb_log_$ident(op\($handler\))]
		ttk::checkbutton $ftop.cb_verb_warn -text Warning -variable log(verbose_$ident(op\($handler\))_warn) -command [list log_viewerReadFile $handler $mf.t_log_$ident(op\($handler\)) $mf.lb_log_$ident(op\($handler\))]
		ttk::checkbutton $ftop.cb_verb_err -text Error -variable log(verbose_$ident(op\($handler\))_err) -command [list log_viewerReadFile $handler $mf.t_log_$ident(op\($handler\)) $mf.lb_log_$ident(op\($handler\))]
		listbox $mf.lb_log_$ident(op\($handler\)) -yscrollcommand [list $mf.scrollb_lb_log_$ident(op\($handler\)) set] -width 0
		ttk::scrollbar $mf.scrollb_lb_log_$ident(op\($handler\)) -command [list $mf.lb_log_$ident(op\($handler\)) yview]
		text $mf.t_log_$ident(op\($handler\)) -yscrollcommand [list $mf.scrollb_log_$ident(op\($handler\)) set] -wrap word
		ttk::scrollbar $mf.scrollb_log_$ident(op\($handler\)) -command [list $mf.t_log_$ident(op\($handler\)) yview]
		ttk::button $wfbottom.b_exit_log_$ident(op\($handler\)) -text [mc "Exit"] -compound left -image $::icon_s(dialog-close) -command "destroy $w; set ::choice(cb_log_$ident(op\($handler\))_main) 0; $ident(tailc\($handler\)) 0 cancel 0"
		
		grid $ftop -in $w -row 0 -column 0 -sticky ew
		grid $w.sep_main -in $w -row 1 -column 0 -sticky ew -padx 4
		grid $mf -in $w -row 2 -column 0 -sticky nesw
		grid $wfbottom -in $w -row 3 -column 0 -sticky ew -padx 3 -pady 3
		
		grid anchor $wfbottom e
		
		grid $ftop.b_save -in $ftop -row 0 -column 0 -padx 2 -pady 1
		grid $ftop.b_email -in $ftop -row 0 -column 1 -pady 1
		grid $ftop.sep_sep1 -in $ftop -row 0 -column 2 -sticky ns -padx 5
		grid $ftop.cb_verb_debug -in $ftop -row 0 -column 3 -padx 2
		grid $ftop.cb_verb_warn -in $ftop -row 0 -column 4 -padx 2
		grid $ftop.cb_verb_err -in $ftop -row 0 -column 5
		
		grid $mf.lb_log_$ident(op\($handler\)) -in $mf -row 0 -column 0 -sticky nesw -pady 3 -padx 3
		grid $mf.scrollb_lb_log_$ident(op\($handler\)) -in $mf -row 0 -column 1 -sticky ns -pady 5
		grid $mf.t_log_$ident(op\($handler\)) -in $mf -row 0 -column 2 -sticky nesw -pady 3 -padx 3
		grid $mf.scrollb_log_$ident(op\($handler\)) -in $mf -row 0 -column 3 -sticky ns -pady 5
		grid $wfbottom.b_exit_log_$ident(op\($handler\)) -in $wfbottom -row 0 -column 0 -pady 7 -padx 3
		
		grid rowconfigure $mf 0 -weight 1 -minsize 350
		grid columnconfigure $mf 2 -weight 1 -minsize 515
		grid rowconfigure $w {2} -weight 1
		grid columnconfigure $w {0} -weight 1
		
		autoscroll $mf.scrollb_lb_log_$ident(op\($handler\))
		autoscroll $mf.scrollb_log_$ident(op\($handler\))
		wm title $w [mc "$ident(name\($handler\)) Log"]
		wm protocol $w WM_DELETE_WINDOW "destroy $w; set ::choice(cb_log_$ident(op\($handler\))_main) 0; $ident(tailc\($handler\)) 0 cancel 0"
		wm iconphoto $w $::icon_e(tv-viewer_icon)
		
		foreach event {<KeyPress> <<PasteSelection>>} {
			bind $mf.t_log_$ident(op\($handler\)) $event break
		}
		bind $mf.t_log_$ident(op\($handler\)) <Control-c> {event generate %W <<Copy>>}
		bind $mf.t_log_$ident(op\($handler\)) <Control-Key-a> {%W tag add sel 0.0 end; break}
		bind $mf.t_log_$ident(op\($handler\)) <ButtonPress-3> [list tk_popup $mf.t_log_$ident(op\($handler\)).mContext %X %Y]
		
		menu $mf.t_log_$ident(op\($handler\)).mContext -tearoff 0
		
		$mf.t_log_$ident(op\($handler\)).mContext add command -label [mc "Select everything"] -compound left -image $::icon_men(placeholder) -command [list $mf.t_log_$ident(op\($handler\)) tag add sel 0.0 end] -accelerator [mc "Ctrl-A"]
		$mf.t_log_$ident(op\($handler\)).mContext add separator
		$mf.t_log_$ident(op\($handler\)).mContext add command -label [mc "Copy to clipboard"] -compound left -image $::icon_men(clipboard) -command [list event generate $mf.t_log_$ident(op\($handler\)) <<Copy>>] -accelerator [mc "Ctrl-C"]
		
		if {$::option(tooltips) == 1 && $::option(tooltips_main) == 1} {
			settooltip $ftop.b_save [mc "Save logfile to disk"]
			settooltip $ftop.b_email [mc "Send logfile by e-mail to the authors"]
			settooltip $ftop.cb_verb_debug [mc "Show/hide Debug messages"]
			settooltip $ftop.cb_verb_warn [mc "Show/hide Warning messages"]
			settooltip $ftop.cb_verb_err [mc "Show/hide Error messages"]
		}
		
		set ::log(verbose_$ident(op\($handler\))_debug) 1
		set ::log(verbose_$ident(op\($handler\))_warn) 1
		set ::log(verbose_$ident(op\($handler\))_err) 1
		log_writeOutTv 0 "Read existing logfile, insert into log viewer and start monitoring logfile for $ident(name\($handler\))."
		after 0 [list log_viewerReadFile $handler $mf.t_log_$ident(op\($handler\)) $mf.lb_log_$ident(op\($handler\))]
		tkwait visibility .log_viewer_$ident(op\($handler\))
		log_viewerLb $mf.lb_log_$ident(op\($handler\)) $mf.t_log_$ident(op\($handler\)) $handler
		wm minsize .log_viewer_$ident(op\($handler\)) [winfo reqwidth .log_viewer_$ident(op\($handler\))] [winfo reqheight .log_viewer_$ident(op\($handler\))]
	} else {
		log_writeOutTv 0 "Closing log viewer for $ident(name\($handler\))."
		$ident(tailc\($handler\)) 0 cancel 0; destroy .log_viewer_$ident(op\($handler\))
	}
}

proc log_viewerReadFile {handler logw loglb} {
	puts $::main(debug_msg) "\033\[0;1;33mDebug: log_viewerReadFile \033\[0m \{$handler\} \{$logw\} \{$loglb\}"
	array set ident {
		filen(1) tvviewer
		filen(2) videoplayer
		filen(3) scheduler
		op(1) tv
		op(2) mpl
		op(3) sched
		name(1) TV-Viewer
		name(2) MPlayer
		name(3) Scheduler
		tailc(1) log_viewerTvTail
		tailc(2) log_viewerMplTail
		tailc(3) log_viewerSchedTail
	}
	
	if {[file exists "$::option(home)/log/$ident(filen\($handler\)).log"]} {
		$ident(tailc\($handler\)) 0 cancel 0
		$logw delete 0.0 end
		$loglb delete 0 end
		set logfile_open [open "$::option(home)/log/$ident(filen\($handler\)).log" r]
		$logw tag configure fat_blue -font "TkTextFont [font actual TkTextFont -displayof $logw -size] bold" -foreground #0030C4
		$logw tag configure fat_red -font "TkTextFont [font actual TkTextFont -displayof $logw -size] bold" -foreground #DF0F0F
		set i 0
		set match_date ""
		while {[gets $logfile_open line]!=-1} {
			set match 0
			if {$::log(verbose_$ident(op\($handler\))_warn) == 1} {
				if {[string match "*WARNING:*" $line]} {
					set match 1
					$logw insert end $line\n fat_blue
				}
			} else {
				if {[string match "*WARNING:*" $line]} continue
			}
			if {$::log(verbose_$ident(op\($handler\))_err) == 1} {
				if {[string match "*ERROR:*" $line]} {
					set match 1
					$logw insert end $line\n fat_red
				}
			} else {
				if {[string match "*ERROR:*" $line]} continue
			}
			if {$::log(verbose_$ident(op\($handler\))_debug) == 1} {
				if {[string match "*DEBUG:*" $line]} {
					set match 1
					$logw insert end $line\n
				}
			} else {
				if {[string match "*DEBUG:*" $line]} continue
			}
			if {[string match "# Start new session*" $line]} {
				set match 1
				if {"[lindex $line 4]" == "$match_date"} {
					incr i
					$loglb insert end "Session [lindex $line 4] - $i"
					set match_date [lindex $line 4]
					$logw insert end $line\n
					$logw mark set [string map {{ } {}} "[lindex $line 4] - $i"] [$logw index "end -10 chars"]
				} else {
					$loglb insert end "Session [lindex $line 4] - 1"
					set i 1
					set match_date [lindex $line 4]
					$logw insert end $line\n
					$logw mark set [string map {{ } {}} "[lindex $line 4] - 1"] [$logw index "end -10 chars"]
				}
			}
			if {$match == 0} {
				$logw insert end $line\n
			}
			unset -nocomplain match
		}
		bind $loglb <<ListboxSelect>> [list log_viewerLb $loglb $logw $handler]
		$loglb activate end
		$loglb selection set end
		$loglb see end
		seek $logfile_open 0 end
		set position [tell $logfile_open]
		close $logfile_open
		set ::data(log_$ident(op\($handler\))_id) [after 100 "$ident(tailc\($handler\)) $::option(home)/log/$ident(filen\($handler\)).log $position $logw"]
	}
}

proc log_viewerLb {loglb logw handler} {
	puts $::main(debug_msg) "\033\[0;1;33mDebug: log_viewerLb \033\[0m \{$loglb\} \{$logw\} \{$handler\}"
	array set ident {
		filen(1) tvviewer
		filen(2) videoplayer
		filen(3) scheduler
		op(1) tv
		op(2) mpl
		op(3) sched
		name(1) TV-Viewer
		name(2) MPlayer
		name(3) Scheduler
		tailc(1) log_viewerTvTail
		tailc(2) log_viewerMplTail
		tailc(3) log_viewerSchedTail
	}
	
	set get_lb_index [$loglb curselection]
	set get_lb_content [$loglb get $get_lb_index]
	set marking [string map {{ } {}} [lrange $get_lb_content end-2 end]]
	$logw see $marking
}

proc log_viewerEmail {handler} {
	puts $::main(debug_msg) "\033\[0;1;33mDebug: log_viewerEmail \033\[0m \{$handler\}"
	array set ident {
		filen(1) tvviewer
		filen(2) videoplayer
		filen(3) scheduler
		op(1) tv
		op(2) mpl
		op(3) sched
		name(1) TV-Viewer
		name(2) MPlayer
		name(3) Scheduler
		tailc(1) log_viewerTvTail
		tailc(2) log_viewerMplTail
		tailc(3) log_viewerSchedTail
	}
	
	set logfile "$::option(home)/log/$ident(filen\($handler\)).log"
	catch {exec xdg-email christianrapp@users.sourceforge.net --attach "$logfile" &}
}

proc log_viewerMplTail {filename position logw} {
	if {"$position" == "cancel"} {
		puts $::main(debug_msg) "\033\[0;1;33mDebug: log_viewerMplTail \033\[0;1;31m::cancel:: \033\[0m"
		catch {after cancel $::data(log_mpl_id)}
		unset -nocomplain ::data(log_mpl_id)
		return
	}
	if {[winfo exists .log_viewer_mpl]} {
		$logw tag configure fat_blue -font "TkTextFont [font actual TkTextFont -displayof $logw -size] bold" -foreground #0030C4
		
		$logw tag configure fat_red -font "TkTextFont [font actual TkTextFont -displayof $logw -size] bold" -foreground #DF0F0F
		
		set fh [open $filename r]
		fconfigure $fh -blocking no -buffering line
		seek $fh $position start
		while {[eof $fh] == 0} {
			gets $fh line
			if {[string length $line] > 0} {
				if {$::log(verbose_mpl_warn) == 1} {
					if {[string match "*WARNING:*" $line]} {
						$logw insert end $line\n fat_blue
						$logw see end
					}
				} else {
					if {[string match "*WARNING:*" $line]} continue
				}
				if {$::log(verbose_mpl_err) == 1} {
					if {[string match "*ERROR:*" $line]} {
						$logw insert end $line\n fat_red
						$logw see end
					}
				} else {
					if {[string match "*ERROR:*" $line]} continue
				}
				if {$::log(verbose_mpl_debug) == 1} {
					if {[string match "*DEBUG:*" $line]} {
						$logw insert end $line\n
						$logw see end
					}
				} else {
					if {[string match "*DEBUG:*" $line]} continue
				}
			}
		}
		set position [tell $fh]
		close $fh
		set ::data(log_mpl_id) [after 1000 [list log_viewerMplTail $filename $position $logw]]
	}
}

proc log_viewerSchedTail {filename position logw} {
	if {"$position" == "cancel"} {
		puts $::main(debug_msg) "\033\[0;1;33mDebug: log_viewerSchedTail \033\[0;1;31m::cancel:: \033\[0m"
		catch {after cancel $::data(log_sched_id)}
		unset -nocomplain ::data(log_sched_id)
		return
	}
	if {[winfo exists .log_viewer_sched]} {
		$logw tag configure fat_blue -font "TkTextFont [font actual TkTextFont -displayof $logw -size] bold" -foreground #0030C4
		
		$logw tag configure fat_red -font "TkTextFont [font actual TkTextFont -displayof $logw -size] bold" -foreground #DF0F0F
		
		set fh [open $filename r]
		fconfigure $fh -blocking no -buffering line
		seek $fh $position start
		while {[eof $fh] == 0} {
			gets $fh line
			if {[string length $line] > 0} {
				set match 0
				if {$::log(verbose_sched_warn) == 1} {
					if {[string match "*WARNING:*" $line]} {
						set match 1
						$logw insert end $line\n fat_blue
						$logw see end
					}
				} else {
					if {[string match "*WARNING:*" $line]} continue
				}
				if {$::log(verbose_sched_err) == 1} {
					if {[string match "*ERROR:*" $line]} {
						set match 1
						$logw insert end $line\n fat_red
						$logw see end
					}
				} else {
					if {[string match "*ERROR:*" $line]} continue
				}
				if {$::log(verbose_sched_debug) == 1} {
					if {[string match "*DEBUG:*" $line]} {
						set match 1
						$logw insert end $line\n
						$logw see end
					}
				} else {
					if {[string match "*DEBUG:*" $line]} continue
				}
				if {$match == 0} {
					$logw insert end $line\n
					$logw see end
				}
				unset -nocomplain match
			}
		}
		set position [tell $fh]
		close $fh
		set ::data(log_sched_id) [after 1000 [list log_viewerSchedTail $filename $position $logw]]
	}
}

proc log_viewerTvTail {filename position logw} {
	if {"$position" == "cancel"} {
		puts $::main(debug_msg) "\033\[0;1;33mDebug: log_viewerTvTail \033\[0;1;31m::cancel:: \033\[0m"
		catch {after cancel $::data(log_tv_id)}
		unset -nocomplain ::data(log_tv_id)
		return
	}
	if {[winfo exists .log_viewer_tv]} {
		$logw tag configure fat_blue -font "TkTextFont [font actual TkTextFont -displayof $logw -size] bold" -foreground #0030C4
		
		$logw tag configure fat_red -font "TkTextFont [font actual TkTextFont -displayof $logw -size] bold" -foreground #DF0F0F
		
		set fh [open $filename r]
		fconfigure $fh -blocking no -buffering line
		seek $fh $position start
		while {[eof $fh] == 0} {
			gets $fh line
			if {[string length $line] > 0} {
				set match 0
				if {$::log(verbose_tv_warn) == 1} {
					if {[string match "*WARNING:*" $line]} {
						set match 1
						$logw insert end $line\n fat_blue
						$logw see end
					}
				} else {
					if {[string match "*WARNING:*" $line]} continue
				}
				if {$::log(verbose_tv_err) == 1} {
					if {[string match "*ERROR:*" $line]} {
						set match 1
						$logw insert end $line\n fat_red
						$logw see end
					}
				} else {
					if {[string match "*ERROR:*" $line]} continue
				}
				if {$::log(verbose_tv_debug) == 1} {
					if {[string match "*DEBUG:*" $line]} {
						set match 1
						$logw insert end $line\n
						$logw see end
					}
				} else {
					if {[string match "*DEBUG:*" $line]} continue
				}
				if {$match == 0} {
					$logw insert end $line\n
					$logw see end
				}
				unset -nocomplain match
			}
		}
		set position [tell $fh]
		close $fh
		set ::data(log_tv_id) [after 1000 [list log_viewerTvTail $filename $position $logw]]
	}
}

proc log_writeOutTv {handler text} {
	set logformat "#"
	if {$handler == 0} {
		append logformat " \[[clock format [clock scan now] -format {%H:%M:%S}]\] DEBUG: "
	}
	if {$handler == 1} {
		append logformat " \[[clock format [clock scan now] -format {%H:%M:%S}]\] WARNING: "
	}
	if {$handler == 2} {
		append logformat " \[[clock format [clock scan now] -format {%H:%M:%S}]\] ERROR: "
	}
	puts $::logf_tv_open_append "$logformat $text"
	flush $::logf_tv_open_append
}

proc log_writeOutMpl {handler text} {
	set logformat "#"
	if {$handler == 0} {
		append logformat " \[[clock format [clock scan now] -format {%H:%M:%S}]\] DEBUG: "
	}
	if {$handler == 1} {
		append logformat " \[[clock format [clock scan now] -format {%H:%M:%S}]\] WARNING: "
	}
	if {$handler == 2} {
		append logformat " \[[clock format [clock scan now] -format {%H:%M:%S}]\] ERROR: "
	}
	puts $::logf_mpl_open_append "$logformat $text"
	flush $::logf_mpl_open_append
}
